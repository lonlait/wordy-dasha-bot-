from html import escape
from typing import Dict, List


def _safe(v, default="‚Äî"):
    return v if (v is not None and v != "") else default


def render_word_card(meaning: Dict) -> str:
    """
    meaning ‚Äî —ç–ª–µ–º–µ–Ω—Ç –∏–∑ /meanings
    –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: text/word, transcription, translation.text, partOfSpeechCode, imageUrl
    """
    word = meaning.get("text") or meaning.get("word") or ""
    transcription = meaning.get("transcription")
    pos = meaning.get("partOfSpeechCode")
    translation = (meaning.get("translation") or {}).get("text")
    note = (meaning.get("translation") or {}).get("note")

    title = f"<b>{escape(_safe(word))}</b>"
    if transcription:
        title += f" [{escape(transcription)}]"
    if pos:
        title += f" ‚Ä¢ {escape(pos)}"
    
    body = f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {escape(_safe(translation))}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if note:
        body += f" <i>({escape(note)})</i>"

    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    alts: List[str] = []
    for tr in (meaning.get("meaningsWithSimilarTranslation") or []):
        t = (tr.get("translation") or {}).get("text")
        if t and t != translation and t not in alts:
            alts.append(t)
    if alts:
        body += f"\n<b>–ï—â—ë:</b> {escape('; '.join(alts[:4]))}"

    return f"{title}\n{body}"


def render_examples(meaning: Dict) -> str:
    # –í –Ω–æ–≤–æ–º API Skyeng –ø—Ä–∏–º–µ—Ä—ã –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ meaning
    # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ API meanings
    return "üòî –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞.\n\n–í –Ω–æ–≤–æ–º API Skyeng –ø—Ä–∏–º–µ—Ä—ã –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ."


def render_quiz_question(word: str, options: List[str], correct: int) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–≤–∏–∑–∞"""
    question = f"üéØ –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ ¬´{word}¬ª?\n\n"
    
    for i, option in enumerate(options):
        marker = "‚úÖ" if i == correct else "‚ùå"
        question += f"{marker} {escape(option)}\n"
    
    return question
