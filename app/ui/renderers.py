from html import escape
from typing import Dict, List


def _safe(v, default="‚Äî"):
    return v if (v is not None and v != "") else default


def render_word_card(meaning: Dict) -> str:
    """
    meaning ‚Äî —ç–ª–µ–º–µ–Ω—Ç –∏–∑ /meanings
    –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: text/word, transcription, translation.text, partOfSpeechCode, imageUrl
    """
    word = meaning.get("text") or meaning.get("word") or ""
    transcription = meaning.get("transcription")
    pos = meaning.get("partOfSpeechCode")
    translation = (meaning.get("translation") or {}).get("text")
    note = (meaning.get("translation") or {}).get("note")

    title = f"<b>{escape(_safe(word))}</b>"
    if transcription:
        title += f" [{escape(transcription)}]"
    if pos:
        title += f" ‚Ä¢ {escape(pos)}"
    
    body = f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {escape(_safe(translation))}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if note:
        body += f" <i>({escape(note)})</i>"

    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    alts: List[str] = []
    for tr in (meaning.get("meaningsWithSimilarTranslation") or []):
        t = (tr.get("translation") or {}).get("text")
        if t and t != translation and t not in alts:
            alts.append(t)
    if alts:
        body += f"\n<b>–ï—â—ë:</b> {escape('; '.join(alts[:4]))}"

    return f"{title}\n{body}"


def render_examples(meaning: Dict) -> str:
    examples = meaning.get("examples") or []
    if not examples:
        return "üòî –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞."
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–º–µ—Ä–∞: {examples[0] if examples else '–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤'}")
    
    lines = []
    for i, ex in enumerate(examples[:5]):
        en = ex.get("text") or ""
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ü–†–ò–ú–ï–†–ê (–Ω–µ —Å–ª–æ–≤–∞)
        ru = ""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        if ex.get("translation"):
            if isinstance(ex["translation"], dict):
                ru = ex["translation"].get("text") or ""
            else:
                ru = str(ex["translation"])
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞
        if not ru:
            ru = ex.get("translationText") or ex.get("translation_text") or ""
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
        if not ru:
            ru = ex.get("translation_text") or ex.get("translationText") or ""
        
        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü—Ä–∏–º–µ—Ä: '{en}' -> –ü–µ—Ä–µ–≤–æ–¥: '{ru}'")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ API)
        lines.append(f"<b>{i+1}.</b> {escape(en)}")
    
    return "üìö <b>–ü—Ä–∏–º–µ—Ä—ã —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:</b>\n\n" + "\n\n".join(lines)


def render_quiz_question(word: str, options: List[str], correct: int) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–≤–∏–∑–∞"""
    question = f"üéØ –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ ¬´{word}¬ª?\n\n"
    
    for i, option in enumerate(options):
        question += f"{i+1}. {escape(option)}\n"
    
    return question

def render_quiz_result(word: str, options: List[str], correct: int, user_answer: int) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞"""
    result = f"üéØ –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ ¬´{word}¬ª?\n\n"
    
    for i, option in enumerate(options):
        if i == correct:
            marker = "‚úÖ"
        elif i == user_answer and i != correct:
            marker = "‚ùå"
        else:
            marker = "‚ö™"
        result += f"{marker} {escape(option)}\n"
    
    if user_answer == correct:
        result += "\nüéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        result += f"\nüòî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {escape(options[correct])}"
    
    return result
