import asyncio
import os
import logging
from typing import Dict

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, URLInputFile
from aiogram.client.default import DefaultBotProperties

from app.skyeng_client import SkyengClient
from app.ui.keyboards import kb_search_card
from app.ui.renderers import render_word_card, render_examples

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ø–æ–º–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤ .env
if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN in environment")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –í –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø–µ –¥–µ—Ä–∂–∏–º –Ω–∞–π–¥–µ–Ω–Ω—É—é meaning –≤ –ø–∞–º—è—Ç–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (volatile).
# –í –ø—Ä–æ–¥–µ ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å ID –≤ –ë–î/–∫—ç—à–µ.
LAST_MEANING: Dict[int, Dict] = {}

client = SkyengClient()


@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Wordy Dasha ü§ì\n\n"
        "–ü–æ–º–æ–≥—É —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞:\n"
        "‚Ä¢ üîç –ù–∞–π–¥—É –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø—Ä–∏–º–µ—Ä—ã\n"
        "‚Ä¢ üîä –ü—Ä–æ–∏–∑–Ω–µ—Å—É —Å–ª–æ–≤–æ –≤—Å–ª—É—Ö\n"
        "‚Ä¢ üìö –ü–æ–¥–±–µ—Ä—É –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
        "‚Ä¢ üìù –î–∞–º –º–∏–Ω–∏-–∫–≤–∏–∑ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ (–ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏ –∏–ª–∏ –ø–æ-—Ä—É—Å—Å–∫–∏) –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è!\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏ –Ω–∞—Å—Ç–æ—è—â–µ–π –î–∞—à–µ –≤ –ª–∏—á–∫—É @daria_lanina –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –µ—ë –∫–∞–Ω–∞–ª @dasha_ate_my_hw"
    )


@dp.message(Command("help"))
async def on_help(m: Message):
    await m.answer(
        "Wordy Dasha ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! ‚ú®\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ: <b>run</b> –∏–ª–∏ <b>–±–µ–∂–∞—Ç—å</b>\n"
        "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /search <—Å–ª–æ–≤–æ>\n\n"
        "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
        "‚Ä¢ üìù –ü–µ—Ä–µ–≤–æ–¥ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é\n"
        "‚Ä¢ üîä –û–∑–≤—É—á–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è\n"
        "‚Ä¢ üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ üéØ –ú–∏–Ω–∏-–∫–≤–∏–∑ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è\n\n"
        "üí° <b>–•–æ—á–µ—à—å –±–æ–ª—å—à–µ?</b>\n"
        "–ó–∞–Ω–∏–º–∞–π—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ —Å –Ω–∞—Å—Ç–æ—è—â–µ–π –î–∞—à–µ–π:\n"
        "‚Ä¢ –õ–∏—á–∫–∞: @daria_lanina\n"
        "‚Ä¢ –ö–∞–Ω–∞–ª: @dasha_ate_my_hw"
    )


@dp.message(Command("search"))
async def on_search_cmd(m: Message):
    query = (m.text or "").split(maxsplit=1)
    if len(query) < 2:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <—Å–ª–æ–≤–æ>")
        return
    await handle_query(m, query[1])


@dp.message(F.text)
async def on_text(m: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if m.text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    await handle_query(m, m.text.strip())


@dp.message(Command("stats"))
async def on_stats(m: Message):
    await m.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üöß\n\n"
        "–°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚Ä¢ üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ üéØ –í–∏–¥–µ—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n"
        "‚Ä¢ üèÜ –ü–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        "–ê –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞! üí™"
    )


async def handle_query(m: Message, q: str):
    try:
        logger.info(f"–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞: {q}")
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π answer_chat_action
        
        words = await client.search_words(q)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {len(words)}")
        
        if not words:
            await m.answer(
                f"ü§î –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{q}¬ª.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ"
            )
            return

        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π meaning_id
        meaning_ids = []
        for w in words:
            # —Å–ª–æ–≤–æ –∏–∑ /words/search —Å–æ–¥–µ—Ä–∂–∏—Ç meanings —Å id
            for mm in (w.get("meanings") or []):
                mid = mm.get("id")
                if isinstance(mid, int):
                    meaning_ids.append(mid)
        meaning_ids = list(dict.fromkeys(meaning_ids))  # unique, preserve order
        
        logger.info(f"Meaning IDs: {meaning_ids}")

        if not meaning_ids:
            await m.answer(
                f"üòï –ü–æ ¬´{q}¬ª –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞—à–ª–æ—Å—å.\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Ä–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –æ–ø–µ—á–∞—Ç–∫–∞."
            )
            return

        details = await client.get_meanings(meaning_ids[:1])  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ: –±–µ—Ä—ë–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π: {len(details)}")
        
        if not details:
            await m.answer(
                "üòî –ù–µ —Å–º–æ–≥–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –ø–æ–∑–∂–µ."
            )
            return

        meaning = details[0]
        LAST_MEANING[m.from_user.id] = meaning  # –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏¬ª

        text = render_word_card(meaning)
        await m.answer(
            f"üéØ <b>–ù–∞–π–¥–µ–Ω–æ!</b>\n\n{text}",
            reply_markup=kb_search_card()
        )
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª–æ–≤–æ: {q}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞ '{q}': {e}", exc_info=True)
        await m.answer(
            "üòÖ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n"
            "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
        )


@dp.callback_query(F.data == "speak")
async def on_speak(c: CallbackQuery):
    meaning = LAST_MEANING.get(c.from_user.id)
    if not meaning:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ —Å–ª–æ–≤–æ! üîç", show_alert=True)
        return

    # –í –æ—Ç–≤–µ—Ç–µ /meanings —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–æ–ª–µ soundUrl
    sound_url = meaning.get("soundUrl") or \
                (meaning.get("pronunciation") or {}).get("soundUrl")
    if not sound_url:
        await c.answer("üòî –û–∑–≤—É—á–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞.", show_alert=True)
        return

    try:
        await c.message.answer_audio(
            audio=URLInputFile(sound_url),
            caption=f"üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: {meaning.get('text') or meaning.get('word')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}")
        await c.answer("üòÖ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ.", show_alert=True)


@dp.callback_query(F.data == "examples")
async def on_examples(c: CallbackQuery):
    meaning = LAST_MEANING.get(c.from_user.id)
    if not meaning:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏ —Å–ª–æ–≤–æ! üîç", show_alert=True)
        return
    text = render_examples(meaning)
    await c.message.answer(f"üìö {text}")


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ Wordy Dasha...")
    # Long polling ‚Äî –ø—Ä–æ—â–µ –¥–ª—è –í–ú –≤ Yandex Cloud –±–µ–∑ HTTPS –¥–ª—è webhook
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ httpx –∫–ª–∏–µ–Ω—Ç–∞
        try:
            import anyio
            anyio.from_thread.run(client.aclose)  # –Ω–∞ —Å–ª—É—á–∞–π sync –≤—ã—Ö–æ–¥–∞
        except Exception:
            pass
