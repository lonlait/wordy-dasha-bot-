import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from .skyeng_client import SkyengClient
from .ui.keyboards import kb_search_card, kb_quiz
from .ui.renderers import render_word_card, render_examples, render_quiz_question
from .database import Database
from .bot_settings import WELCOME_MESSAGE, HELP_MESSAGE

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, 
          default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
skyeng = SkyengClient()
db = Database()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def on_start(m: Message):
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_or_create_user(
            m.from_user.id,
            m.from_user.username,
            m.from_user.first_name
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['telegram_id']} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        await m.answer(WELCOME_MESSAGE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await m.answer("üòÖ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def on_help(m: Message):
    await m.answer(HELP_MESSAGE)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command("stats"))
async def on_stats(m: Message):
    try:
        stats = await db.get_user_stats(m.from_user.id)
        stats_text = f"""
üéØ <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üìö <b>–°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ:</b> {stats['total_words']}
‚úÖ <b>–ò–∑—É—á–µ–Ω–æ:</b> {stats['mastered_words']}
üéØ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {stats['correct_answers']}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {stats['wrong_answers']}
üìä <b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {stats['accuracy']}%
        """.strip()
        
        await m.answer(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {e}")
        await m.answer("üòÖ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dictionary
@dp.message(Command("dictionary"))
async def on_dictionary(m: Message):
    try:
        words = await db.get_user_words(m.from_user.id, limit=10)
        
        if not words:
            await m.answer("üìö –¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ù–∞—á–Ω–∏ –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–∞!")
            return
        
        text = "üìö <b>–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞:</b>\n\n"
        for i, word_data in enumerate(words, 1):
            mastered = "‚úÖ" if word_data['mastered'] else "üìñ"
            text += f"{i}. {mastered} <b>{word_data['word']}</b> ‚Äî {word_data['translation']}\n"
        
        await m.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /dictionary: {e}")
        await m.answer("üòÖ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def on_text(m: Message):
    if m.text.startswith('/'):
        return
        
    try:
        logger.info(f"–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞: {m.text}")
        
        # –ü–æ–∏—Å–∫ —Å–ª–æ–≤
        words = await skyeng.search_words(m.text)
        if not words:
            await m.answer("üòî –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
        meaning_ids = ([words[0].get("meaningIds", [])[0]]
                       if words[0].get("meaningIds") else [])
        meanings = await skyeng.get_meanings(meaning_ids)
        
        if not meanings:
            await m.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            return
        
        meaning = meanings[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_or_create_user(m.from_user.id)
        await db.add_word_to_user(user['id'], meaning)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–æ–≤–∞
        card_text = render_word_card(meaning)
        await m.answer(card_text, reply_markup=kb_search_card())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞ '{m.text}': {e}")
        await m.answer("üòÖ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–º. "
                       "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏"
@dp.callback_query(lambda c: c.data == "speak")
async def on_speak(c: CallbackQuery):
    await c.answer("üîä –§—É–Ω–∫—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ—Ä—ã"
@dp.callback_query(lambda c: c.data == "examples")
async def on_examples(c: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
        message_text = c.message.text
        word = message_text.split('\n')[0].replace('<b>', '').replace('</b>', '').split('[')[0].strip()
        
        # –ò—â–µ–º —Å–ª–æ–≤–æ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
        words = await skyeng.search_words(word)
        if not words:
            await c.answer("üòî –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        meaning_ids = [words[0].get("meaningIds", [])[0]] if words[0].get("meaningIds") else []
        meanings = await skyeng.get_meanings(meaning_ids)
        
        if not meanings:
            await c.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã!")
            return
        
        examples_text = render_examples(meanings[0])
        await c.message.answer(examples_text)
        await c.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await c.answer("üòÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–≤–∏–∑"
@dp.callback_query(lambda c: c.data == "quiz")
async def on_quiz(c: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–≤–∏–∑–∞
        user = await db.get_or_create_user(c.from_user.id)
        words = await db.get_user_words(user['id'], limit=5)
        
        if len(words) < 2:
            await c.answer("üéØ –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–≤–∏–∑–∞!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        import random
        quiz_word = random.choice(words)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        all_words = [w['translation'] for w in words if w['translation'] != quiz_word['translation']]
        options = [quiz_word['translation']] + random.sample(all_words, min(3, len(all_words)))
        random.shuffle(options)
        correct_index = options.index(quiz_word['translation'])
        
        question_text = render_quiz_question(quiz_word['word'], options, correct_index)
        await c.message.answer(question_text, reply_markup=kb_quiz())
        await c.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–≤–∏–∑–µ: {e}")
        await c.answer("üòÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–∏–∑–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–≤–∏–∑–∞
@dp.callback_query(lambda c: c.data.startswith("quiz_"))
async def on_quiz_answer(c: CallbackQuery):
    try:
        if c.data == "quiz_correct":
            await c.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
        elif c.data == "quiz_incorrect":
            await c.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        elif c.data == "quiz_next":
            await c.answer("üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑
        
        await c.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–≤–∏–∑–∞: {e}")
        await c.answer("üòÖ –û—à–∏–±–∫–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async def on_shutdown():
    await skyeng.aclose()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.init()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())