import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from .skyeng_client import SkyengClient
from .ui.keyboards import kb_search_card, kb_quiz
from .ui.renderers import (
    render_word_card, render_examples, render_quiz_question, render_quiz_result
)
from .database import Database
from .bot_settings import WELCOME_MESSAGE, HELP_MESSAGE

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, 
          default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
skyeng = SkyengClient()
db = Database()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def on_start(m: Message):
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_or_create_user(
            m.from_user.id,
            m.from_user.username,
            m.from_user.first_name
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {m.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        await m.answer(WELCOME_MESSAGE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await m.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def on_help(m: Message):
    await m.answer(HELP_MESSAGE)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
@dp.message(Command("quiz"))
async def on_quiz_command(m: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–≤–∏–∑–∞
        user = await db.get_or_create_user(m.from_user.id)
        words = await db.get_user_words(m.from_user.id, limit=5)
        
        if len(words) < 2:
            await m.answer("üòî –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–≤–∏–∑–∞!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        import random
        quiz_word = random.choice(words)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = [quiz_word['translation']]
        other_words = [w for w in words if w['id'] != quiz_word['id']]
        options.extend([w['translation'] for w in random.sample(other_words, min(3, len(other_words)))])
        random.shuffle(options)
        
        correct_index = options.index(quiz_word['translation'])
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        builder = InlineKeyboardBuilder()
        for i, option in enumerate(options):
            builder.button(text=option, callback_data=f"quiz_answer_{i}_{correct_index}")
        builder.adjust(1)
        
        question_text = render_quiz_question(quiz_word['word'], options, correct_index)
        await m.answer(question_text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /quiz: {e}")
        await m.answer("üòÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–∏–∑–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search
@dp.message(Command("search"))
async def on_search(m: Message):
    search_help = """üîç <b>–ö–∞–∫ –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–∞:</b>

<b>–ö–æ–º–∞–Ω–¥–∞:</b> /search —Å–ª–æ–≤–æ
<b>–ü—Ä–∏–º–µ—Ä:</b> /search hello

<b>–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ:</b>
‚Ä¢ hello
‚Ä¢ –ø—Ä–∏–≤–µ—Ç
‚Ä¢ run
‚Ä¢ –±–µ–∂–∞—Ç—å

<b>–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:</b>
üìñ –ü–µ—Ä–µ–≤–æ–¥ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
üîä –û–∑–≤—É—á–∫—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
üéØ –ú–∏–Ω–∏-–∫–≤–∏–∑ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ø–æ–º–æ—â—å
/stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/dictionary - —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å
/quiz - –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑"""
    
    await m.answer(search_help)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command("stats"))
async def on_stats(m: Message):
    try:
        user = await db.get_user_by_telegram_id(m.from_user.id)
        if not user:
            await m.answer("üòî –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        stats = await db.get_user_stats(user['id'])
        stats_text = f"""üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üìö –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {stats['total_words']}
‚úÖ –ò–∑—É—á–µ–Ω–æ: {stats['mastered_words']}
üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_answers']}
‚ùå –û—à–∏–±–æ–∫: {stats['wrong_answers']}
üìà –¢–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy']:.1f}%"""
        
        await m.answer(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {e}")
        await m.answer("üòÖ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dictionary
@dp.message(Command("dictionary"))
async def on_dictionary(m: Message):
    try:
        user = await db.get_user_by_telegram_id(m.from_user.id)
        if not user:
            await m.answer("üòî –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        words = await db.get_user_words(m.from_user.id, limit=20)
        if not words:
            await m.answer("üìö –¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –ù–∞—á–Ω–∏ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        total_words = await db.get_user_words_count(m.from_user.id)
        
        words_text = f"üìö <b>–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å:</b> ({len(words)} –∏–∑ {total_words})\n\n"
        for i, word in enumerate(words, 1):
            words_text += (f"{i}. <b>{word['word']}</b> ‚Äî "
                          f"{word['translation']}\n")
        
        # –ï—Å–ª–∏ —Å–ª–æ–≤ –±–æ–ª—å—à–µ 20, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if total_words > 20:
            words_text += f"\n... –∏ –µ—â—ë {total_words - 20} —Å–ª–æ–≤"
        
        await m.answer(words_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /dictionary: {e}")
        await m.answer("üòÖ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def on_text(m: Message):
    if m.text.startswith('/'):
        return
        
    try:
        logger.info(f"–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞: {m.text}")
        
        # –ü–æ–∏—Å–∫ —Å–ª–æ–≤
        words = await skyeng.search_words(m.text)
        if not words:
            await m.answer("üòî –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
        # API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç meanings –Ω–∞–ø—Ä—è–º—É—é
        meanings = words[0].get("meanings", [])
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã meanings: {meanings}")
        
        if not meanings:
            logger.warning("meanings –ø—É—Å—Ç–æ–π!")
            await m.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            return
        
        meaning = meanings[0]
        logger.info(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ meaning: {meaning}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            user = await db.get_or_create_user(m.from_user.id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {user}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            meaning_with_word = meaning.copy()
            meaning_with_word["word"] = words[0]["text"]  # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
            
            await db.add_word_to_user(user['id'], meaning_with_word)
            logger.info("–°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                user = await db.get_user_by_telegram_id(m.from_user.id)
                if user:
                    await db.add_word_to_user(user['id'], meaning)
                    logger.info("–°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö "
                               "(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª)")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    await m.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ. "
                                 "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
                    return
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
                await m.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
                return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–ª–æ–≤–∞
        try:
            logger.info(f"–î–∞–Ω–Ω—ã–µ meaning: {meaning}")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            meaning_with_word = meaning.copy()
            meaning_with_word["word"] = words[0]["text"]  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
            card_text = render_word_card(meaning_with_word)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {card_text[:100]}...")

            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_url = meaning.get("imageUrl")
            if image_url:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not image_url.startswith("http"):
                    image_url = "https:" + image_url
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    await m.answer_photo(
                        photo=image_url,
                        caption=card_text,
                        reply_markup=kb_search_card()
                    )
                    logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await m.answer(card_text, reply_markup=kb_search_card())
                    logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await m.answer(card_text, reply_markup=kb_search_card())
                logger.info("–ö–∞—Ä—Ç–æ—á–∫–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ render_word_card: {e}")
            logger.error(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö meaning: {type(meaning)}")
            await m.answer("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞ '{m.text}': {e}")
        await m.answer("üòÖ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é "
                       "–∏–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏"
@dp.callback_query(lambda c: c.data == "speak")
async def on_speak(c: CallbackQuery):
    await c.answer("üîä –§—É–Ω–∫—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏"
@dp.callback_query(lambda c: c.data == "pronounce")
async def on_pronounce(c: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–∑–≤—É—á–∫–∏
        message_text = c.message.text or c.message.caption or ""
        if not message_text:
            await c.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
            return
            
        word = (message_text.split('\n')[0]
                .replace('<b>', '')
                .replace('</b>', '')
                .split('[')[0]
                .strip())
        
        # –ò—â–µ–º —Å–ª–æ–≤–æ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏
        logger.info(f"–ò—â–µ–º –æ–∑–≤—É—á–∫—É –¥–ª—è —Å–ª–æ–≤–∞: '{word}'")
        words = await skyeng.search_words(word)
        if not words:
            await c.answer("üòî –û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç meanings –Ω–∞–ø—Ä—è–º—É—é
        meanings = words[0].get("meanings", [])
        if not meanings:
            await c.answer("üòî –û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        meaning = meanings[0]
        sound_url = meaning.get("soundUrl")
        logger.info(f"–ù–∞–π–¥–µ–Ω soundUrl: {sound_url}")
        
        if sound_url:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
                await c.message.answer_voice(voice=sound_url)
                await c.answer("üîä –û–∑–≤—É—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–∑–≤—É—á–∫–∏: {e}")
                await c.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–∑–≤—É—á–∫—É!")
        else:
            await c.answer("üòî –û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∑–≤—É—á–∫–∏: {e}")
        await c.answer("üòÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–∑–≤—É—á–∫–∏!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ—Ä—ã"
@dp.callback_query(lambda c: c.data == "examples")
async def on_examples(c: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
        message_text = c.message.text or c.message.caption or ""
        if not message_text:
            await c.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
            return
            
        word = (message_text.split('\n')[0]
                .replace('<b>', '')
                .replace('</b>', '')
                .split('[')[0]
                .strip())
        
        # –ò—â–µ–º —Å–ª–æ–≤–æ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
        words = await skyeng.search_words(word)
        if not words:
            await c.answer("ÔøΩÔøΩ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º meanings –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
        meanings = words[0].get("meanings", [])
        if not meanings:
            await c.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ API meanings
        meaning_ids = [meaning["id"] for meaning in meanings[:3]]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
        detailed_meanings = await skyeng.get_meanings(meaning_ids)
        
        if not detailed_meanings:
            await c.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã!")
            return
        
        # –ò—â–µ–º meaning —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        examples_found = False
        for detailed_meaning in detailed_meanings:
            examples = detailed_meaning.get("examples", [])
            if examples:
                examples_text = render_examples(detailed_meaning)
                await c.message.answer(examples_text)
                await c.answer()
                examples_found = True
                break
        
        if not examples_found:
            await c.answer("üòî –ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        await c.answer("üòÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–≤–∏–∑"
@dp.callback_query(lambda c: c.data == "quiz")
async def on_quiz(c: CallbackQuery):
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–≤–∏–∑–∞
        try:
            user = await db.get_or_create_user(c.from_user.id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω: {user}")
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                user = await db.get_user_by_telegram_id(c.from_user.id)
                if not user:
                    await c.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    return
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
                await c.answer("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
                return
        
        words = await db.get_user_words(c.from_user.id, limit=5)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞: {len(words)} —Å–ª–æ–≤")
        
        if len(words) < 2:
            await c.answer("ÔøΩÔøΩ –î–æ–±–∞–≤—å –±–æ–ª—å—à–µ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–≤–∏–∑–∞!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        import random
        quiz_word = random.choice(words)
        logger.info(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∫–≤–∏–∑–∞: {quiz_word}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        all_words = [w['translation'] for w in words
                     if w['translation'] != quiz_word['translation']]
        options = ([quiz_word['translation']] +
                  random.sample(all_words, min(3, len(all_words))))
        random.shuffle(options)
        correct_index = options.index(quiz_word['translation'])
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–≤–∏–∑–∞
        builder = InlineKeyboardBuilder()
        for i, option in enumerate(options):
            builder.button(text=option, callback_data=f"quiz_answer_{i}_{correct_index}")
        builder.adjust(1)
        
        logger.info(f"–°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞ –¥–ª—è —Å–ª–æ–≤–∞: '{quiz_word['word']}'")
        question_text = render_quiz_question(quiz_word['word'], options, correct_index)
        await c.message.answer(question_text, reply_markup=builder.as_markup())
        await c.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–∏–∑–∞: {e}")
        await c.answer("üòÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–∏–∑–∞!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–≤–∏–∑
@dp.callback_query(lambda c: c.data.startswith("quiz_"))
async def on_quiz_answer(c: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        data = c.data.split("_")
        if len(data) != 4:
            await c.answer("üòÖ –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞!")
            return
        
        answer_index = int(data[2])
        correct_index = int(data[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user = await db.get_or_create_user(c.from_user.id)
        if not user:
            await c.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if answer_index == correct_index:
            await c.answer("üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            await db.update_user_stats(user['id'], correct_answers=1)
        else:
            await c.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            await db.update_user_stats(user['id'], wrong_answers=1)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑: {e}")
        await c.answer("ÔøΩÔøΩ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())